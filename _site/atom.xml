<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>nekle</title>
 <link href="http://nekle.github.com/atom.xml" rel="self"/>
 <link href="http://nekle.github.com/"/>
 <updated>2014-01-11T11:23:08+08:00</updated>
 <id>http://nekle.github.com/</id>
 <author>
   <name>nekle</name>
   <email>nekleding@gmail.com</email>
 </author>
 
 
 <entry>
   <title>iOS自动排布器--LayoutPanel</title>
   <link href="http://nekle.github.com/2013/10/23/iOS%E8%87%AA%E5%8A%A8%E6%8E%92%E5%B8%83%E5%99%A8--LayoutPanel.html"/>
   <updated>2013-10-23T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2013/10/23/iOS自动排布器--LayoutPanel</id>
   <content type="html">&lt;h1&gt;LayoutPanel&lt;/h1&gt;

&lt;p&gt;LayoutPanel 排布器包含三种排布方式, 分别为栈式(StackPanel),停靠式(DockPanel), 九宫格式(GridPanel), 这三种布局方式各有特色, 在应用中使用 LayoutPanel 进行元素排布时你有可能只需要使用一种排布方式, 也有可能需要同时使用两种或三种排布方式一起来完成一个复杂的界面元素排布. 完成同一种显示的排布你可以使用不同的排布方式完成. 比如完成一个列表的排布你可以使用 StackPanel, 或者单列的 GridPanel, 或者使用同一中 Dock 方式的 DockPanel. 比如下面的图展示了使用不同的LayoutPanel完成相同的列表排布.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7332/10488276874_ed0774571d.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下图栈式了使用三种不同的 LayoutPanel 共同完成的排布:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;竖屏&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3814/10424358723_1a98e1f271.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;横屏&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7452/10424214796_0f325478d6.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;StackPanel&lt;/h2&gt;

&lt;p&gt;栈式排布方式就如算法中的栈一样, 元素将从左向右(从右向左), 从上到下(从下到上) 按照加入排布器的顺序依次进行排布.
下面为可用的StackPanel 的排布方向.&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;typedef enum _StackPanelFlowDirector
{&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eStackPanelFlowDirector_LeftToRight,
eStackPanelFlowDirector_RightToLeft,
eStackPanelFlowDirector_TopToBottom,
eStackPanelFlowDirector_BottomToTop,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}StackPanelFlowDirector;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h3&gt;StackPanel 支持的布局方式&lt;/h3&gt;

&lt;p&gt;```
typedef enum _StackPanelArchorType{&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eStackPanelArchorType_LeftTop       = 0x00,
eStackPanelArchorType_LeftCenter    = 0x01,
eStackPanelArchorType_LeftBottom    = 0x02,
eStackPanelArchorType_CenterTop     = 0x03,
eStackPanelArchorType_CenterCenter  = 0x04,
eStackPanelArchorType_CenterBottom  = 0x05,
eStackPanelArchorType_RightTop      = 0x06,
eStackPanelArchorType_RightCenter   = 0x07,
eStackPanelArchorType_RightBottom   = 0x08,    
// Fill 属性
eStackPanelArchorType_FillWidth     = 0x100, 
eStackPanelArchorType_FillHeight    = 0x200,
eStackPanelArchorType_FillWidthHeight  = 0x100 | 0x200,
eStackPanelArchorType_Fill          = 0x8000,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}StackPanelArchorType;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;前面的几个类型为布局类型, 后面四个为填充类型, 布局类型确定了元素在排布Panel上的位置, 填充属性确定元素如何填充Panel. 布局属性可以和填充属性同时使用, 但每次布局属性和填充属性都只能使用一个.
比如 &lt;code&gt;eStackPanelArchorType_LeftTop | eStackPanelArchorType_FillWidth&lt;/code&gt; , 指定了元素排布在Panel的左上方, 元素的宽度为Panel的宽度.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;eStackPanelArchorType_Fill&lt;/code&gt; 这个属性是一个特殊的填充类型, 当填充属性指定为这个类型时, 该元素将填充Panel剩余的所有空间. 比如上方&lt;code&gt;横屏&lt;/code&gt;和&lt;code&gt;竖屏&lt;/code&gt;的图中最下方棕色的元素就是指定了该填充类型.&lt;/p&gt;

&lt;h2&gt;GridPanel&lt;/h2&gt;

&lt;p&gt;GridPanel 即九宫格排布方式, 九宫格排布方式在应用的元素排布中也是非常常用的, 比如手机的桌面就是一种九宫格排布. 九宫格排布的一大特点就是能够确定元素的大体位置然后再做特殊的调整.&lt;/p&gt;

&lt;h3&gt;GridPanel 支持的排布方式&lt;/h3&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;typedef enum _GridPanelArchorType
{&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eGridPanelArchorType_LeftTop        = 0x00,
eGridPanelArchorType_LeftCenter     = 0x01,
eGridPanelArchorType_LeftBottom     = 0x02,
eGridPanelArchorType_CenterTop      = 0x03,
eGridPanelArchorType_CenterCenter   = 0x04,
eGridPanelArchorType_CenterBottom   = 0x05,
eGridPanelArchorType_RightTop       = 0x06,
eGridPanelArchorType_RightCenter    = 0x07,
eGridPanelArchorType_RightBottom    = 0x08,
// 填充
eGridPanelArchorType_FillWidth      = 0x100,
eGridPanelArchorType_FillHeight     = 0x200,
eGridPanelArchorType_FillWidthHeight  = 0x100 | 0x200,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;} GridPanelArchorType;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;GridPanel 支持的排布方式和StackPanel支持的排布方式差不多一样, 但少了与Stackpanel 的&lt;code&gt;eStackPanelArchorType_Fill&lt;/code&gt; 相似的填充类型.&lt;/p&gt;

&lt;h2&gt;DockPanel&lt;/h2&gt;

&lt;p&gt;DockPanel 即停靠式排布方式, Dock 排布方式将 Panel 的四条边作为停靠点, 具有一种吸附的效果, 但也不是始终使用Panel的四条边作为Dock点, 应该说使用当前未被使用的Panel空间作为停靠. 这种排布方式也有很多应用方式, 比如说一个画图一个用的工具条.&lt;/p&gt;

&lt;h3&gt;DockPanel 支持的排布方式&lt;/h3&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;typedef enum _DockSideType {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eDockSideType_Left,
eDockSideType_Right,
eDockSideType_Top,
eDockSideType_Bottom,
eDockSideType_Fill,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}DockSideType;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;和 StackPanel 和 GridPanel 相比 DockPanel 只提供了四种停靠方式, 和一种填充方式,  &lt;code&gt;eDockSideType_Fill&lt;/code&gt; 填充方式同样是将Panel中剩余的空间完全填充.&lt;/p&gt;

&lt;h3&gt;Demo&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3769/10488943405_e87320f41e.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Nekle/StackPanel&quot;&gt;LayoutPanel&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>问题的间接解决</title>
   <link href="http://nekle.github.com/2013/10/07/%E9%97%AE%E9%A2%98%E7%9A%84%E9%97%B4%E6%8E%A5%E8%A7%A3%E5%86%B3.html"/>
   <updated>2013-10-07T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2013/10/07/问题的间接解决</id>
   <content type="html">&lt;p&gt;我们的生活中无处不存在间接的解决问题的例子, 通过这篇文章的描述希望对你解决问题有所帮助. 下面通过几个例子具体的讨论一下, 间接的解决问题如何很好的满足需要, 又达到共赢的好处.&lt;/p&gt;

&lt;h2&gt;快递&lt;/h2&gt;

&lt;p&gt;你在淘宝上买了一双鞋, 这个事情中涉及到的角色本来只有你和商家. 你买鞋子, 商家卖鞋子, 当你在商家那买了一双鞋, 商家把鞋子给你.
问题出现了, 商家如何把鞋子给你, 商家不可能坐车或者坐飞机将鞋子送给你. 你也不可能坐车或坐飞机到商家那去取. 这样成本太高了.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.staticflickr.com/2823/10155647475_f21b1e8050.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;怎么办? 快递出现了!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7388/10155820163_ff4f798cf3.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这个过程中为什么会出现快递, 为什么能容忍快递的存在? 当然是因为快递的出现降低了商家和消费者之间送货的成本, 达到了三方的共赢. 快递的出现促进了网购的发展.
在这个过程中快递就是解决网购送货问题的一个间接角色, 这个间接的角色很好的解决了问题.&lt;/p&gt;

&lt;p&gt;生活还有很多间接解决问题的案例, 比如邮箱, 解决了送信时, 送信员送信时主人不在, 需要等待的问题; 比如说招聘网站, 解决了求职者与招聘者不能信息互通的问题…&lt;/p&gt;

&lt;h2&gt;订单&lt;/h2&gt;

&lt;p&gt;问题的间接解决方法, 不只是存在于我们日常的生活中, 在写代码, 方案指定等等的时候同样可以使用一种间接的方式去解决一些问题.
比如说一个淘宝的某个处理订单的后台系统A 拥有用户所有的订单数据, 此时淘宝构建另一个系统B来对这些订单做实时分析, 那B系统的数据从哪里来, 肯定是从A处获得. 此时A,B就产生了一个联系. 若以后淘宝后台有需要构建一个C系统对用户的订单做其他方面的业务. 则A有可能和C产生联系. A 就可能会存在很多与本身业务无关的逻辑, 最终可能导致 C 成为臃肿的模块, 成为单点, 限制业务的发展等等一系列问题.&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://farm8.staticflickr.com/7302/10155805683_75ac86b341.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;怎么办? 我们为何不将A中转发订单的逻辑抽取出来作为一个单独的系统O. 使得A与BCD解耦, A只与O建立联系. 如此这般, 再有新的业务需要订单数据也只用在O中添加配置或者类似的东西就可以获得用户订单数据. O在这里更像是一个订阅系统. A是数据的提供者, BCD是数据的订阅者. 当然O作为中间的一个订阅系统, 不只可以提供订单数据的订阅, 所有有需要类似订阅的业务都可以在O中实现. 这样O就发展成为了一个订阅的专门系统(专一功能的系统总是能够做到极致).
&lt;img src=&quot;http://farm3.staticflickr.com/2857/10155735026_e0dc9b12cc.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;监听&lt;/h2&gt;

&lt;p&gt;这属于一个较大的间接解决问题的例子, 有没有更小的例子, 当然有!&lt;/p&gt;

&lt;p&gt;比如在一个应用的开发中一个用户的数据的更新, 可能代码中很多地方都会更新用户的数据, 也会有很多地方会显示用户的数据. 如何将用户信息的修改实时的显示到各个地方? 最直接的方法就是在所有会更新用户数据的地方添加监听, 当用户数据修改时调用回调修改各处的显示, 这样做不只增加了写代码时重复劳动的量, 也可能忘记在某个地方添加监听, 查问题也比较难. 如何间接的解决这个问题? 我们可以为用户数据的更新添加一个监听点, 就叫”用户数据更新监听点”, 将所有显示用户数据的地方在这个监听点上添加监听, 在更新可以更新用户信息的地方只需要调用一下这个”用户数据更新监听点”, 这个监听点就可以调用到所有的在此添加了监听的对象. 这样做简单的解决了更新点与现实点多对多的复杂问题. 添加监听点不只有这点好处, 监听点还解决了更新点与显示点创建不同步的问题, 比如说没有监听点时, 必须创建了更新点你才能添加监听, 有了监听点之后, 你可以在任何时候创建更新点.&lt;/p&gt;

&lt;p&gt;在写代码中一个最小的间接解决问题的例子可能是交换AB两个数据的值的问题. 间接变量的引入很好的达到了目的.&lt;/p&gt;

&lt;h2&gt;间接的解决问题&lt;/h2&gt;

&lt;p&gt;当你遇到问题需要解决时, 不妨寻找一种间接的方法, 想一想AB之间的问题是否可以转换为ACB之间的问题.&lt;/p&gt;

&lt;h2&gt;TIPS&lt;/h2&gt;

&lt;p&gt;现在很多应用都是间接解决问题的例子, 比如说: 打车应用, 微博应用, 教育类应用, 订餐应用等等,&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>就近接入是个什么东西</title>
   <link href="http://nekle.github.com/2013/09/30/%E5%B0%B1%E8%BF%91%E6%8E%A5%E5%85%A5%E6%98%AF%E4%B8%AA%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF.html"/>
   <updated>2013-09-30T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2013/09/30/就近接入是个什么东西</id>
   <content type="html">&lt;h2&gt;一个比喻&lt;/h2&gt;

&lt;p&gt;我住的旁边有一个沃尔玛, 每个星期我都会去一两次沃尔玛买一些日常的用品, 沃尔玛齐全的商品是小超市无法比的, 需要买的东西几乎都会有. 沃尔玛在深圳有12个店, 这些店分布在深圳的各处. 沃尔玛为什么要在深圳开设12家店, 是不是开设一家就足够了呢? 答案显而易见, 开一家店只能招揽附近的消费者, 其他地方的消费者会由于距离太远而选择其他的超市. 将店开设在距离消费者较近的地方, 消费者可以根据自己的情况选择距离自己较近的店进行购物, 这样可以最大限度的招揽到消费者.&lt;/p&gt;

&lt;p&gt;沃尔玛付出了什么代价: 增加了更多的成本, 包括人力,物力,财力等
沃尔玛获得了什么好处: 获得了更多的消费者, 更多的消费者认知度, 更多的销售.&lt;/p&gt;

&lt;p&gt;一个互联网服务和沃尔玛超市一样, 当你只将超市开设在某一个地方时, 相较于距离较远的消费者, 距离超市近的消费者就会常常去. 互联网服务也一样, 访问较快的用户会感觉很好,很有可能会继续使用甚至会推荐给朋友, 访问较慢的用户就会感到厌烦, 很大可能会放弃使用甚至会建议朋友不要用. 所以为提高用户访问互联网服务的速度, 在不同地区部署相同的互联网服务在现在是一种通用的做法.
你在不同的地区部署了相同的互联网服务, 如何让用户知道这些服务, 并根据用户自身情况访问质量最好位置的服务, 就是就近接入所要解决的问题.
在生活中就近接入像114查询服务,你可以询问获得附近的旅店,餐馆…. 在互联网中就近接入更像dns服务器, 不过就近接入更加特化, 有更多的业务属性.
在互联网中就近接入为什么重要, 如果你了解DNSPod 的发展历史和现在的业务, 我想你会明白. 如果你不了解可以谷歌一下.&lt;/p&gt;

&lt;h2&gt;就近接入是什么&lt;/h2&gt;

&lt;p&gt;我想通过上面的比喻说明我想大家都对就近接入有了一定的认识. 就近接入就是根据用户情况, 告诉用户访问哪里的服务更快更爽的服务.&lt;/p&gt;

&lt;h3&gt;当前都有些什么互联网服务会用到这个服务?&lt;/h3&gt;

&lt;p&gt;在线视频: 在线视频由于需要传输很大的视频文件, 所以让用户连接到一个”近”的服务器, 将会对视频播放的流畅度有很大的提升, 从而带来的优势也是可以感受到的.
和在线视频相同性质的还会有音频或者图片服务等.
移动互联网: 由于移动网络的特殊性, 这些特殊性你需要去了解一下中国的无线网络环境. 当你读懂了”世界最远的距离不是天涯海角, 而是我在移动, 你在移动”, 你就会认识到这点.&lt;/p&gt;

&lt;h2&gt;有哪些设计点 ?&lt;/h2&gt;

&lt;p&gt;让我们再来看看就近接入是干什么的: 就近接入就是根据用户情况, 告诉用户访问哪里的服务更快更爽的服务.
在这个描述中涉及到的角色包括: 用户, 服务, 就近接入.
就近接入: 作为用户访问服务的中间角色, 就近接入需要知道用户和服务的信息.&lt;/p&gt;

&lt;h3&gt;那到底需要知道哪些信息呢?&lt;/h3&gt;

&lt;p&gt;对于用户, 就近接入需要知道的能够定位一个用户当前所在位置(北京, 深圳, …), 当前网络(联通, 移动, …, 2G, 3G, Wifi) 的信息.
对于服务, 就近接入需要知道这些服务部署在哪些地方(北京, 深圳, …), 这些服务当前的状况(拥塞, 死机, 良好… )
就近接入知道用户和服务的信息后, 剩下的就是下发策略, 也就是对不同的用户应该下发哪个服务的地址让其访问. 这里需要考虑很多东西, 比如下发数量, 访问优先级, 容错等.&lt;/p&gt;

&lt;h3&gt;用户位置的获取&lt;/h3&gt;

&lt;p&gt;在这里, 还涉及到一个重要的东西, 就是用户给你的信息不回直接指出他在哪里(深圳, 北京,…), 当然你也可以通过gps, 但是这个几乎是不可能的. 最直接的方式是通过用户的ip, 当用户使用2G或3G网络时, 用户都会分配得一个运营商的ip 地址, 这些ip地址都是分地区的, 使用这个ip你就可以确定用户的位置了? 当然不是, 你还需要一个健全的各个运营商拥有的ip和地理位置的对应关系 这样你才能通过用户 ip 确定用户的位置.&lt;/p&gt;

&lt;p&gt;用户的网络类型, 这个你可以通过前端带到就近接入, 也可以通过你的 ip 库查询获得.&lt;/p&gt;

&lt;h3&gt;服务的位置及当前状态&lt;/h3&gt;

&lt;p&gt;服务的位置, 这个是服务的运维人员部署的, 如何更好地部署这些服务也会是一个很大的问题(就如沃尔玛的选址, 他们不会在同一个地点开设2家一样的超市, 也不会在人少交通不便的地方开设超市). 不好的部署方式, 即使使用就近接入也无济于事.
服务的当前状态, 这也是就近接入的一个重要依据, 不能让一个用户去一个拥塞或死机了的服务处访问(就如不能去一个拥挤或关门了的沃尔玛买东西一样, 去了只能是shit了).&lt;/p&gt;

&lt;h2&gt;扩展&lt;/h2&gt;

&lt;p&gt;上面只是对就近接入的一个大概描述, 其中涉及到的很多细节并未提及, 比如说如何知道服务的状态, 如何获得ip库, 如何ip容错, 如何确定用户访问速度等等, 这些都需要实现者去考虑, 这里只说了就近接入的一个部分, 利用就近接入所处的位置, 还可以有很多其他功能, 比如说用户测速, 用户环境切换等...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS 关键对象关系</title>
   <link href="http://nekle.github.com/2013/05/26/%E5%85%B3%E9%94%AE%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB.html"/>
   <updated>2013-05-26T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2013/05/26/关键对象关系</id>
   <content type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/syntax-js/shBrushCpp.js&quot;&gt;&lt;/script&gt;


&lt;h3&gt;关系图&lt;/h3&gt;

&lt;p&gt;下图描述了一个ios应用中重要的几个对象之间的关系.&lt;/p&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;

+---------------+     +-----------------------+  +-----------+      +-----------+ +-------------------+
| UIApplication |     | UIApplicationDelegate |  | UIWindow  |      | UIScreen  | | UIViewController  |
+---------------+     +-----------------------+  +-----------+      +-----------+ +-------------------+
        |                        |                  |                     |            |
        | delegate&lt; assign&gt;      |                  |                     |            |
        |-----------------------&gt;|                  |                     |            |
        |                        |                  |                     |            |
        | keyWindow&lt; readonly&gt;   |                  |                     |            |
        |------------------------------------------&gt;|                     |            |
        |                        |                  |                     |            |
        | windows&lt; readonly&gt;     |                  |                     |            |
        |------------------------------------------&gt;|                     |            |
        |                        |                  |                     |            |
        |                        | window&lt; retain&gt;  |                     |            |
        |                        |-----------------&gt;|                     |            |
        |                        |                  |                     |            |
        |                        |                  | screen&lt; retain&gt;     |            |
        |                        |                  |--------------------&gt;|            |
        |                        |                  |                     |            |
        |                        |                  | rootViewController&lt; retain&gt;      |
        |                        |                  |---------------------------------&gt;|
        |                        |                  |                     |            |
&lt;/pre&gt;


&lt;h3&gt;UIApplication&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;delegate&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;一个遵从&lt;code&gt;UIApplicationDelegate&lt;/code&gt; 定义的 protocol 的对象, 当&lt;code&gt;UIApplication&lt;/code&gt; 发生状态变化时, 就会调用&lt;code&gt;delegate&lt;/code&gt; 的相应方法, 实现这些方法给了用户一个在&lt;code&gt;UIApplication&lt;/code&gt;状态变化时做出响应的机会, 比如: 应用将要关闭, 系统处于低内存, 应用完成启动.&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;windows&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;包含了应用可见的和不可见的&lt;code&gt;windows&lt;/code&gt;. 这些&lt;code&gt;windows&lt;/code&gt; 按照从后向前的顺序排序.&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;keyWindow&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;指向应用的key Window, 这个key window 为 &lt;code&gt;windows&lt;/code&gt; 中最后发送了&lt;code&gt;makeKeyAndVisible&lt;/code&gt; 消息的 window.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;UIApplicationDelegate&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;window&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;指向了应用在设备主屏上显示出来的内容window. 一般情况下, 当创建一个工程时, xcode 都会同时在app 的delegate 中创建一个&lt;code&gt;window&lt;/code&gt;属性. 当此属性为&lt;code&gt;nil&lt;/code&gt;时, 将会导致应用创建一个通用的&lt;code&gt;UIWindow&lt;/code&gt; 赋值给该属性. 如果想为应用提供一个自定义的window, 你需要实现给属性的&lt;code&gt;getter&lt;/code&gt; 方法, 通过&lt;code&gt;getter&lt;/code&gt; 去创建和返回你的自定义window.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;UIWindow&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;screen&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;指向了&lt;code&gt;window&lt;/code&gt;当前在其上显示的&lt;code&gt;screen&lt;/code&gt;. 默认情况下, 所有的&lt;code&gt;windows&lt;/code&gt;都由主设&lt;code&gt;screen&lt;/code&gt;幕创建, 当有另外的&lt;code&gt;screen&lt;/code&gt; 连接到设备上时, assigning 一个不同的screen给此属性将会导致&lt;code&gt;window&lt;/code&gt;显示在新的screen上.&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;rootViewController&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;指向了window的root view controller, 这个controller提供了window的内容view.assigning 一个view controller 给这个属性, 将会使这个view controller的 view 成为这个window 的内容 view. 如果window已经指向一个view controller, 将会移除已存在的view controller, 在指向新的view controller.&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>xcode NIB</title>
   <link href="http://nekle.github.com/2013/05/19/xib-%E6%96%87%E4%BB%B6%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E5%85%B3%E7%B3%BB.html"/>
   <updated>2013-05-19T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2013/05/19/xib-文件与代码文件关系</id>
   <content type="html">&lt;p&gt;翻译自: &lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html%23//apple_ref/doc/uid/10000051i-CH4-SW8&quot;&gt;Nib Files&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Nib 文件&lt;/h3&gt;

&lt;p&gt;nib 文件在创建OS X和iOS 应用中扮演着一个重要角色. 使用Nib文件, 你可以在xcode里通过图形化的方式创建和修改你的用户界面. 修改后可以马上看到效果, 比如说你可以很快的尝试不同的布局方式和配置. 此后你甚至不需要修改代码就可以对你的界面作出修改.
对于使用Appkit或者UIkit框架构建的应用程序, nib 文件具有特殊的意义. 这两个框架都支持将nib文件用于layout, windows, views, control, 并将这些对象与应用的事件处理代码相关联. Xcode 结合这些框架来帮助你将界面上的control与工程中对这些control做出响应的对象相连接. 这种方式减少了设置的数量, 也使得改变界面与代码的关系变得很简单.&lt;/p&gt;

&lt;h3&gt;解剖 nib 文件&lt;/h3&gt;

&lt;p&gt;nib 文件除了可以描述应用界面相关的元素, 包括windows, views, controls 等等. nib 文件还可以描述一些看不见的元素, 比如说管理windows 和 views 的对象(viewController, Delegate…). 在运行时, 这些描述被用于重建所描述的对象, 并且配置到你的应用中, 当你在运行时加载一个nib文件时, 你会获得一个描述对象的拷贝, nib加载代码会实例化这些对象, 并初始化. 然后将这些对象和你代码中的对象建立连接.&lt;/p&gt;

&lt;h3&gt;接口对象(interface object)&lt;/h3&gt;

&lt;p&gt;接口对象是你添加到nib文件中实现用户界面的东西. 当nib文件在运行时加载时, 这些接口对象实际上是被nib加载代码实例化的. 新建的nib文件至少有一个接口对象, 一般是一个window 或一个menu, 以后你可以在其中添加更多的接口对象在nib文件中以实现你的用户界面.
除了代表可见的对象, 比如windows, views, controls, 和 menus. 接口对象还可以代表不可见的对象, 几乎在所有情况下, 你添加到nib文件中的不可见的对象都是一些用来管理可视对象的控制对象. 尽管你也可以使用代码创建这些对象, 但是通过nib文件创建和配置这些对象更加方便. xcode 提供了一个通用的对象, 你可以在添加controllers 和其他一些不可见对象时使用. xcode 也提供了controllers 对象用于管理Cocoa的绑定.&lt;/p&gt;

&lt;h3&gt;File's Owner&lt;/h3&gt;

&lt;p&gt;File's owner 是nib中最重要的对象之一. 不像接口对象, File's owner对象是一个占位(palceholder)对象, 当nib文件加载时不会被创建. 起而代之, 你需要创建这个对象并将其传递给nib加载代码. &lt;strong&gt;这个对象重要的原因是它是应用代码和nib文件之间的主链接&lt;/strong&gt;. 更明确一点, 它是nib文件中内容的controller 对象.&lt;/p&gt;

&lt;h3&gt;First Responder&lt;/h3&gt;

&lt;p&gt;在nib文件按中, First Responder 是一个占位(placeholder)对象, 代表了应用动态决策的responder链中的第一个对象. 由于一个应用的responder chain 不能在设计时决定, 所以First Responder 占位对象作为target的替身, 代表了任何想传递给应用responder chain的活动消息的target. menu items 通常将First Responder 作为target. 例如, 在窗口上的最小化menu item会影藏应用最前面的窗口, 而不是某一个特殊的窗口. 再比如, Copy menu item 应该拷贝当前选中的东西. 其他在你应用中的对象也可以将 First Responder 最为target.
当你将一个nib文件加载到内存时, 你不需要最任何事去管理或者替换 First Responder 占位对象, AppKit 和UIKit 框架会自动根据当前应用程序的配置去设置和维持First Responder.&lt;/p&gt;

&lt;h3&gt;Top-Level Objects&lt;/h3&gt;

&lt;p&gt;当应用程序加载nib文件的时候, Cocoa 创建整个工程中全部对象的&lt;strong&gt;objects graph&lt;/strong&gt;, 这个objects graph 包括了所有的windows, views, controls, cells, menus, 和在nib中自定义的对象. Top-level objects 是那些没有父对象的对象. top-level objects 一般只包括windows menubars, 和你添加到nib中的自定义controllers 对象, (File's Owner, First responder, 和 Application 是占位对象, 不认为是 top-level objects)&lt;/p&gt;

&lt;p&gt;一般, 你使用&lt;code&gt;outlets&lt;/code&gt;在 File's owner 对象中去保存对nib文件中的top-level objects的引用. 如果你不使用&lt;code&gt;outlets&lt;/code&gt;, 你可以直接从nib 加载函数获得top-level objects. 由于当这些对象使用完时, 你的应用需要负责释放他们, 所以你应该一直保持指向这些对象额指针.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html#//apple_ref/doc/uid/10000051i-CH4-SW6&quot;&gt;Managing the Lifetimes of Objects from Nib Files&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Image and Sound Resources&lt;/h3&gt;

&lt;p&gt;在xcode中, 你可以引用一个外部的image 和sound resources 从你的 nib 文件中. 一些controls 和 views 在默认配置情况下, 能够显示 images 或者播放 sound resources. Xcode 库提供访问工程中images 和sound resources的接口, 这使得你可以链接到nib中的这些资源文件. nib 文件不会直接存储这些资源, 它存储这些资源的names以便nib加载代码能够找到.
当你加载一个包含images 或者 sound resources引用的nib文件时, nib 加载代码读取真实的image 或声音 文件到内存, 并且cache 他们. 在OS X 中, image 和 sound resources存储在命名caches中以便你可以在需要的时候访问. 在 iOS 中, 只有imags 被存储在命名caches 中. 要访问images, 你可以使用&lt;code&gt;NSImage&lt;/code&gt;或&lt;code&gt;UIImage&lt;/code&gt; 的&lt;code&gt;imageNamed:&lt;/code&gt; 方法, 只依赖于你使用的平台. 在OS X中要访问sounds, 可以使用&lt;code&gt;NSSound&lt;/code&gt; 的&lt;code&gt;soundNamed:&lt;/code&gt;方法.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2012 总结与计划</title>
   <link href="http://nekle.github.com/2012/12/30/back-2012-and-plan-2013.html"/>
   <updated>2012-12-30T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2012/12/30/back-2012-and-plan-2013</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8555/8750004192_349910f970.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;回首 2012&lt;/h3&gt;

&lt;p&gt;2012即将过去，回顾工作这半年。刚开始的踌躇满志，誓要作出一个成绩来，最后能得到领导和同事的肯定。当时也只是在心中这样想，也并未列出一个达到这个计划的详细步骤。在那时主要的计划是首先得在技术上达到一个肯定的高度，然后做好分配的每一件事情。想来这两点都没有做好，也没得到什么肯定。在激情了一段时间后，尽然开始懈怠了，看到周围同事都安逸的工作着，自己也开始被同化了，堕落的思想最终获胜，造成了不好的结果。在一个感觉安逸的环境，周围都是安逸的空气，如何保持自己最开始的计划是一件很难的事情，需要时时的提醒自己最开始的计划，目标。提醒自己保持自我，为最终的目标努力。&lt;/p&gt;

&lt;h3&gt;2013 计划&lt;/h3&gt;

&lt;p&gt;2013 了，世界末日没有来，生活还得继续。在 2013一定要保持自我，实现自己的目标计划：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Blog:&lt;/strong&gt; blog 建好已经很长一段时间，当初希望在上面写一些技术内容，最终闲麻烦未能实现。2013 计划最少一个月2篇文章，文章内容来源：工作中遇到的问题思考，自己涉及到的技术问题，看书感悟。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;看书:&lt;/strong&gt; 2012 未看一本书，未买一本书，看书才是提高自我的主要途径，2013 开始要看买一些书来看，不能以任何理由推脱。看书类型：主要还是看一些技术相关的书，首先得看一遍《unix环境高级编程》、《TCP/IP详解 1/2卷》、《linux 内核》然后再考虑其他的技术相关书籍。非技术书籍：到豆瓣搜集一些推荐书籍，看时需写一些自我的感想。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;技术:&lt;/strong&gt; 2013 需要学习的技术为 iOS 开发。首先看完网易公开课《斯坦福 iOS开发》视频，并买一本iOS开发书籍看完，最终写一个 project提交到 AppStore。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;工作:&lt;/strong&gt; 2013 工作上需要积极主动，做好分配给自己的事情，并能有所思考和提升。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;2013 座右铭&lt;/h3&gt;

&lt;p&gt;在工作中得到欣赏的人是：&lt;strong&gt;超出预期和主动承担的人&lt;/strong&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[转]Markdown 语法</title>
   <link href="http://nekle.github.com/2012/09/15/mdsyntax.html"/>
   <updated>2012-09-15T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2012/09/15/mdsyntax</id>
   <content type="html">&lt;h2&gt;Markdown 语法说明 (简体中文版)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is Simplelified  Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown: Syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt; 这份文档派生(fork)于&lt;a href=&quot;http://markdown.tw/&quot;&gt;繁体中文版&lt;/a&gt;，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里&lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md&quot;&gt;查看它的源文件&lt;/a&gt;。「繁体中文版的原始文件可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md&quot;&gt;查看这里&lt;/a&gt; 。」--By @&lt;a href=&quot;http://twitter.com/riku&quot;&gt;riku&lt;/a&gt; / 本项目托管于 &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN&quot;&gt;GitCafe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本项目同时也托管于 &lt;a href=&quot;https://github.com/riku/Markdown-Syntax-CN&quot;&gt;Github&lt;/a&gt; 上，请通过 fork＋pull request 方式来帮忙改进本项目。&lt;/p&gt;

&lt;h3 id=&quot;catalog&quot;&gt;目录&lt;/h3&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;概述&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#philosophy&quot;&gt;宗旨&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;兼容 HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autoescape&quot;&gt;特殊字符自动转换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#block&quot;&gt;区块元素&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#p&quot;&gt;段落和换行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#headers&quot;&gt;标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blockquote&quot;&gt;区块引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#list&quot;&gt;列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#precode&quot;&gt;代码区块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hr&quot;&gt;分隔线&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#span&quot;&gt;区段元素&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#link&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#em&quot;&gt;强调&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#code&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#img&quot;&gt;图片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#misc&quot;&gt;其它&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#backslash&quot;&gt;反斜杠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autolink&quot;&gt;自动链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acknowledgement&quot;&gt;感谢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cheetsheet&quot;&gt;CheetSheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;h3 id=&quot;overview&quot;&gt;概述&lt;/h3&gt;




&lt;h4 id=&quot;philosophy&quot;&gt;宗旨&lt;/h4&gt;


&lt;p&gt;Markdown 的目标是实现「易读易写」。&lt;/p&gt;

&lt;p&gt;可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt;、&lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt;、&lt;a href=&quot;http://textism.com/tools/textile/&quot;&gt;Textile&lt;/a&gt;、&lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;reStructuredText&lt;/a&gt;、&lt;a href=&quot;http://www.triptico.com/software/grutatxt.html&quot;&gt;Grutatext&lt;/a&gt; 和 &lt;a href=&quot;http://ettext.taint.org/doc/&quot;&gt;EtText&lt;/a&gt;，而最大灵感来源其实是纯文本电子邮件的格式。&lt;/p&gt;

&lt;p&gt;总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。&lt;/p&gt;

&lt;h4 id=&quot;html&quot;&gt;兼容 HTML&lt;/h4&gt;


&lt;p&gt;Markdown 语法的目标是：成为一种适用于网络的&lt;em&gt;书写&lt;/em&gt;语言。&lt;/p&gt;

&lt;p&gt;Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想&lt;em&gt;不是&lt;/em&gt;要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种&lt;em&gt;发布&lt;/em&gt;的格式，Markdown 是一种&lt;em&gt;书写&lt;/em&gt;的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。&lt;/p&gt;

&lt;p&gt;不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。&lt;/p&gt;

&lt;p&gt;要制约的只有一些 HTML 区块元素――比如 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;p&gt;例子如下，在 Markdown 文件里加上一段 HTML 表格：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个普通段落。

&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Foo&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

这是另一个普通段落。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的&lt;code&gt;*强调*&lt;/code&gt;会没有效果。&lt;/p&gt;

&lt;p&gt;HTML 的区段（行内）标签如 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。&lt;/p&gt;

&lt;p&gt;和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。&lt;/p&gt;

&lt;h4 id=&quot;autoescape&quot;&gt;特殊字符自动转换&lt;/h4&gt;


&lt;p&gt;在 HTML 文件中，有两个字符需要特殊处理： &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 。 &lt;code&gt;&amp;lt;&lt;/code&gt; 符号用于起始标签，&lt;code&gt;&amp;amp;&lt;/code&gt; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt;code&gt;&amp;amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;amp;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 字符尤其让网络文档编写者受折磨，如果你要打「&lt;code&gt;AT&amp;amp;T&lt;/code&gt;」 ，你必须要写成「&lt;code&gt;AT&amp;amp;amp;T&lt;/code&gt;」。而网址中的 &lt;code&gt;&amp;amp;&lt;/code&gt; 字符也要转换。比如你要链接到：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;q=larry+bird
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你必须要把网址转换写为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;amp;q=larry+bird
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;才能放到链接标签的 &lt;code&gt;href&lt;/code&gt; 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。&lt;/p&gt;

&lt;p&gt;Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &lt;code&gt;&amp;amp;&lt;/code&gt; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &lt;code&gt;&amp;amp;amp&lt;/code&gt;;。&lt;/p&gt;

&lt;p&gt;所以你如果要在文档中插入一个版权符号 &lt;code&gt;©&lt;/code&gt;，你可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;copy;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会保留它不动。而若你写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT&amp;amp;T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 就会将它转为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT&amp;amp;amp;T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似的状况也会发生在 &lt;code&gt;&amp;lt;&lt;/code&gt; 符号上，因为 Markdown 允许 &lt;a href=&quot;#html&quot;&gt;兼容 HTML&lt;/a&gt; ，如果你是把 &lt;code&gt;&amp;lt;&lt;/code&gt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 &amp;lt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 将会把它转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 &amp;amp;lt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过需要注意的是，code 范围内，不论是行内还是区块， &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 两个符号都&lt;em&gt;一定&lt;/em&gt;会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;block&quot;&gt;区块元素&lt;/h3&gt;




&lt;h4 id=&quot;p&quot;&gt;段落和换行&lt;/h4&gt;


&lt;p&gt;一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。&lt;/p&gt;

&lt;p&gt;「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;p&gt;如果你&lt;em&gt;确实&lt;/em&gt;想要依赖 Markdown 来插入 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 标签的话，在插入处先按入两个以上的空格然后回车。&lt;/p&gt;

&lt;p&gt;的确，需要多费点事（多加空格）来产生 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; ，但是简单地「每个换行都转换为 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;」的方法在 Markdown 中并不适合， Markdown 中 email 式的 &lt;a href=&quot;#blockquote&quot;&gt;区块引用&lt;/a&gt; 和多段落的 &lt;a href=&quot;#list&quot;&gt;列表&lt;/a&gt; 在使用换行来排版的时候，不但更好用，还更方便阅读。&lt;/p&gt;

&lt;h4 id=&quot;headers&quot;&gt;标题&lt;/h4&gt;


&lt;p&gt;Markdown 支持两种标题的语法，类 &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt; 和类 &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt; 形式。&lt;/p&gt;

&lt;p&gt;类 Setext 形式是用底线的形式，利用 &lt;code&gt;=&lt;/code&gt; （最高阶标题）和 &lt;code&gt;-&lt;/code&gt; （第二阶标题），例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is an H1
=============

This is an H2
-------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任何数量的 &lt;code&gt;=&lt;/code&gt; 和 &lt;code&gt;-&lt;/code&gt; 都可以有效果。&lt;/p&gt;

&lt;p&gt;类 Atx 形式则是在行首插入 1 到 6 个 &lt;code&gt;#&lt;/code&gt; ，对应到标题 1 到 6 阶，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 这是 H1

## 这是 H2

###### 这是 H6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 &lt;code&gt;#&lt;/code&gt;，而行尾的 &lt;code&gt;#&lt;/code&gt; 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 这是 H1 #

## 这是 H2 ##

### 这是 H3 ######
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;blockquote&quot;&gt;区块引用 Blockquotes&lt;/h4&gt;


&lt;p&gt;Markdown 标记区块引用是使用类似 email 中用 &lt;code&gt;&amp;gt;&lt;/code&gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &lt;code&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt; 
&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&amp;gt; id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &lt;code&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &lt;code&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ## 这是一个标题。
&amp;gt; 
&amp;gt; 1.   这是第一行列表项。
&amp;gt; 2.   这是第二行列表项。
&amp;gt; 
&amp;gt; 给出一些例子代码：
&amp;gt; 
&amp;gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择&lt;em&gt;增加引用阶层&lt;/em&gt;。&lt;/p&gt;

&lt;h4 id=&quot;list&quot;&gt;列表&lt;/h4&gt;


&lt;p&gt;Markdown 支持有序列表和无序列表。&lt;/p&gt;

&lt;p&gt;无序列表使用星号、加号或是减号作为列表标记：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Red
*   Green
*   Blue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等同于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+   Red
+   Green
+   Blue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也等同于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-   Red
-   Green
-   Blue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有序列表则使用数字接着一个英文句点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  Bird
2.  McHale
3.  Parish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;McHale&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Parish&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的列表标记写成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  Bird
1.  McHale
1.  Parish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或甚至是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3. Bird
1. McHale
8. Parish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。&lt;/p&gt;

&lt;p&gt;如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。&lt;/p&gt;

&lt;p&gt;列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。&lt;/p&gt;

&lt;p&gt;要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是如果你懒，那也行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;
标签包起来，举例来说：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Bird
*   Magic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Magic&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Bird

*   Magic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Bird&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Magic&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要在列表项目内放进引用，那 &lt;code&gt;&amp;gt;&lt;/code&gt; 就需要缩进：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   A list item with a blockquote:

    &amp;gt; This is a blockquote
    &amp;gt; inside a list item.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要放代码区块的话，该区块就需要缩进&lt;em&gt;两次&lt;/em&gt;，也就是 8 个空格或是 2 个制表符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   一列表项包含一个列表区块：

        &amp;lt;代码写在这&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，项目列表很可能会不小心产生，像是下面这样的写法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1986. What a great season.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;换句话说，也就是在行首出现&lt;em&gt;数字-句点-空白&lt;/em&gt;，要避免这样的状况，你可以在句点前面加上反斜杠。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1986\. What a great season.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;precode&quot;&gt;代码区块&lt;/h4&gt;


&lt;p&gt;和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 标签来把代码区块包起来。&lt;/p&gt;

&lt;p&gt;要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个普通段落：

    这是一个代码区块。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会转换成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;这是一个普通段落：&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;这是一个代码区块。
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Here is an example of AppleScript:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;tell application &quot;Foo&quot;
    beep
end tell
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。&lt;/p&gt;

&lt;p&gt;在代码区块里面， &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&lt;/code&gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;div class=&quot;footer&quot;&amp;gt;
        &amp;amp;copy; 2004 Foo Corporation
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;div class=&quot;footer&quot;&amp;amp;gt;
    &amp;amp;amp;copy; 2004 Foo Corporation
&amp;amp;lt;/div&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。&lt;/p&gt;

&lt;h4 id=&quot;hr&quot;&gt;分隔线&lt;/h4&gt;


&lt;p&gt;你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* * *

***

*****

- - -

---------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;span&quot;&gt;区段元素&lt;/h3&gt;




&lt;h4 id=&quot;link&quot;&gt;链接&lt;/h4&gt;


&lt;p&gt;Markdown 支持两种形式的链接语法： &lt;em&gt;行内式&lt;/em&gt;和&lt;em&gt;参考式&lt;/em&gt;两种形式。&lt;/p&gt;

&lt;p&gt;不管是哪一种，链接文字都是用 [方括号] 来标记。&lt;/p&gt;

&lt;p&gt;要建立一个&lt;em&gt;行内式&lt;/em&gt;的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is &amp;lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&amp;gt;
an example&amp;lt;/a&amp;gt; inline link.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=&quot;http://example.net/&quot;&amp;gt;This link&amp;lt;/a&amp;gt; has no
title attribute.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你是要链接到同样主机的资源，你可以使用相对路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;See my [About](/about/) page for details.   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;参考式&lt;/em&gt;的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is [an example][id] reference-style link.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以选择性地在两个方括号中间加上一个空格：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is [an example] [id] reference-style link.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，在文件的任意处，你可以把这个标记的链接内容定义出来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: http://example.com/  &quot;Optional Title Here&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;链接内容定义的形式为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字&lt;/li&gt;
&lt;li&gt;接着一个冒号&lt;/li&gt;
&lt;li&gt;接着一个以上的空格或制表符&lt;/li&gt;
&lt;li&gt;接着链接的网址&lt;/li&gt;
&lt;li&gt;选择性地接着 title 内容，可以用单引号、双引号或是括弧包着&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;下面这三种链接的定义都是相同：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;请注意：&lt;/strong&gt;有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。&lt;/p&gt;

&lt;p&gt;链接网址也可以用方括号包起来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: &amp;lt;http://example.com/&amp;gt;  &quot;Optional Title Here&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: http://example.com/longish/path/to/resource/here
    &quot;Optional Title Here&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。&lt;/p&gt;

&lt;p&gt;链接辨别标签可以有字母、数字、空白和标点符号，但是并&lt;em&gt;不&lt;/em&gt;区分大小写，因此下面两个链接是一样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[link text][a]
[link text][A]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;隐式链接标记&lt;/em&gt;功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 &quot;Google&quot; 链接到 google.com，你可以简化成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Google][]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后定义链接内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Google]: http://google.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Visit [Daring Fireball][] for more information.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后接着定义链接：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Daring Fireball]: http://daringfireball.net/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。&lt;/p&gt;

&lt;p&gt;下面是一个参考式链接的范例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果改成用链接名称的方式写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面两种写法都会产生下面的 HTML。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;I get 10 times more traffic from &amp;lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&amp;gt;Google&amp;lt;/a&amp;gt; than from
&amp;lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&amp;gt;Yahoo&amp;lt;/a&amp;gt;
or &amp;lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&amp;gt;MSN&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。&lt;/p&gt;

&lt;p&gt;使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。&lt;/p&gt;

&lt;h4 id=&quot;em&quot;&gt;强调&lt;/h4&gt;


&lt;p&gt;Markdown 使用星号（&lt;code&gt;*&lt;/code&gt;）和底线（&lt;code&gt;_&lt;/code&gt;）作为标记强调字词的符号，被 &lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt; 包围的字词会被转成用 &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; 标签包围，用两个 &lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt; 包起来的话，则会被转成 &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会转成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;em&amp;gt;single asterisks&amp;lt;/em&amp;gt;

&amp;lt;em&amp;gt;single underscores&amp;lt;/em&amp;gt;

&amp;lt;strong&amp;gt;double asterisks&amp;lt;/strong&amp;gt;

&amp;lt;strong&amp;gt;double underscores&amp;lt;/strong&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。&lt;/p&gt;

&lt;p&gt;强调也可以直接插在文字中间：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;un*frigging*believable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是&lt;strong&gt;如果你的 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;_&lt;/code&gt; 两边都有空白的话，它们就只会被当成普通的符号&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\*this text is surrounded by literal asterisks\*
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;code&quot;&gt;代码&lt;/h4&gt;


&lt;p&gt;如果要标记一小段行内代码，你可以用反引号把它包起来（&lt;code&gt;`&lt;/code&gt;），例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Use the `printf()` function.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Use the &amp;lt;code&amp;gt;printf()&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;``There is a literal backtick (`) here.``
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段语法会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;There is a literal backtick (`) here.&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;A single backtick in a code span: &amp;lt;code&amp;gt;`&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;A backtick-delimited string in a code span: &amp;lt;code&amp;gt;`foo`&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在代码区段内，&lt;code&gt;&amp;amp;&lt;/code&gt; 和方括号&lt;strong&gt;都&lt;/strong&gt;会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Please don't use any `&amp;lt;blink&amp;gt;` tags.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Please don't use any &amp;lt;code&amp;gt;&amp;amp;lt;blink&amp;amp;gt;&amp;lt;/code&amp;gt; tags.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`&amp;amp;#8212;` is the decimal-encoded equivalent of `&amp;amp;mdash;`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;amp;amp;#8212;&amp;lt;/code&amp;gt; is the decimal-encoded
equivalent of &amp;lt;code&amp;gt;&amp;amp;amp;mdash;&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;img&quot;&gt;图片&lt;/h4&gt;


&lt;p&gt;很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。&lt;/p&gt;

&lt;p&gt;Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： &lt;em&gt;行内式&lt;/em&gt;和&lt;em&gt;参考式&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;行内式的图片语法看起来像是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细叙述如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个惊叹号 &lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接着一个方括号，里面放上图片的替代文字&lt;/li&gt;
&lt;li&gt;接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上
选择性的 'title' 文字。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;参考式的图片语法则长得像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![Alt text][id]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: url/to/image  &quot;Optional title attribute&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;misc&quot;&gt;其它&lt;/h3&gt;




&lt;h4 id=&quot;autolink&quot;&gt;自动链接&lt;/h4&gt;


&lt;p&gt;Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;http://example.com/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会转为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;http://example.com/&quot;&amp;gt;http://example.com/&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;address@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会转成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;&amp;amp;#x6D;&amp;amp;#x61;i&amp;amp;#x6C;&amp;amp;#x74;&amp;amp;#x6F;:&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;
&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;
&amp;amp;#109;&quot;&amp;gt;&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;
&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;&amp;amp;#109;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在浏览器里面，这段字串（其实是 &lt;code&gt;&amp;lt;a href=&quot;mailto:address@example.com&quot;&amp;gt;address@example.com&amp;lt;/a&amp;gt;&lt;/code&gt;）会变成一个可以点击的「address@example.com」链接。&lt;/p&gt;

&lt;p&gt;（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）&lt;/p&gt;

&lt;h4 id=&quot;backslash&quot;&gt;反斜杠&lt;/h4&gt;


&lt;p&gt;Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; 标签），你可以在星号的前面加上反斜杠：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\*literal asterisks\*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;acknowledgement&quot;&gt;感谢&lt;/h3&gt;


&lt;p&gt;感谢 &lt;a href=&quot;https://twitter.com/#!/leafy7382&quot;&gt;leafy7382&lt;/a&gt; 协助翻译，&lt;a href=&quot;http://iamhlb.com/&quot;&gt;hlb&lt;/a&gt;、&lt;a href=&quot;http://twitter.com/randylien&quot;&gt;Randylien&lt;/a&gt; 帮忙润稿，&lt;a href=&quot;https://twitter.com/#!/ethantw&quot;&gt;ethantw&lt;/a&gt; 的&lt;a href=&quot;http://ethantw.net/projects/han/&quot;&gt;汉字标准格式・CSS Reset&lt;/a&gt;， &lt;a href=&quot;http://kidwm.net/&quot;&gt;WM&lt;/a&gt; 回报文字错误。&lt;/p&gt;

&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/fenprace&quot;&gt;fenprace&lt;/a&gt;，&lt;a href=&quot;https://github.com/addv&quot;&gt;addv&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;cheetsheet&quot;&gt;CheetSheet&lt;/h3&gt;


&lt;p&gt;&lt;img src=&quot;/images/docs/mdcheatsheet.png&quot; alt=&quot;Markdown CheetSheet&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript正则表达式</title>
   <link href="http://nekle.github.com/2012/09/15/jsregex.html"/>
   <updated>2012-09-15T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2012/09/15/jsregex</id>
   <content type="html">&lt;h2&gt;JavaScript正则表达式&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 在正则表达式中，许多标点符号具有特殊的含义。它们是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;^ $ . * + ? = ! : | \ / ( ) [ ] { }&lt;/code&gt;&lt;/pre&gt;




&lt;br&gt;


&lt;h3&gt;正则表达式的直接量字符&lt;/h3&gt;

&lt;table border=&quot;1&quot; style=&quot;width:100%;&quot;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;th width=&quot;20%&quot;&gt;字符&lt;/th&gt;&lt;th&gt;匹配&lt;/th&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;字母数字字符&lt;/td&gt;&lt;td&gt;自身&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\0&lt;/td&gt;&lt;td&gt;NUL字符(\u0000)&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\t&lt;/td&gt;&lt;td&gt;制表符(\u0009)&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\n&lt;/td&gt;&lt;td&gt;换行符(\u000A)&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\v&lt;/td&gt;&lt;td&gt;垂直制表符(\u000B)&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\f&lt;/td&gt;&lt;td&gt;换页符(\u000C)&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\r&lt;/td&gt;&lt;td&gt;回车(\u000D)&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\xnn&lt;/td&gt;&lt;td&gt;由十六进制数nn指定的拉丁字符，例如，\x0A等价于\n&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\uxxxx&lt;/td&gt;&lt;td&gt;由十六进制xxxx指定的Unicode字符，例如，\u0009等价于\t&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\cX&lt;/td&gt;&lt;td&gt;控制字符^X。例如，\cJ等价于换行符\n&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;




&lt;br&gt;


&lt;h3&gt;正则表达式的字符类&lt;/h3&gt;

&lt;table border=&quot;1&quot; style=&quot;width:100%;&quot;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;th width=&quot;20%&quot;&gt;字符&lt;/th&gt;&lt;th&gt;匹配&lt;/th&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;[...]&lt;/td&gt;&lt;td&gt;位于括号之内的任意字符&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;[^...]&lt;/td&gt;&lt;td&gt;不在括号之中的任意字符&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;.&lt;/td&gt;&lt;td&gt;除换行符和其他Unicode行终止符之外的任意字符&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\w&lt;/td&gt;&lt;td&gt;任意ASCII单字字符，等价于[a-zA-Z0-9_]&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\W&lt;/td&gt;&lt;td&gt;任意非ASCII单字字符，等价于[^a-zA-Z0-9_]&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\s&lt;/td&gt;&lt;td&gt;任何Unicode空白符&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\S&lt;/td&gt;&lt;td&gt;任何非Unicode空白符的字符，注意\w和\S不同&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\d&lt;/td&gt;&lt;td&gt;任意ASCII数字，等价于[0-9_]&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\D&lt;/td&gt;&lt;td&gt;除了ASCII数字之外的任何字符，等价于[^0-9_]&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;[\b]&lt;/td&gt;&lt;td&gt;退格直接量(特例)&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;




&lt;br&gt;


&lt;h3&gt;正则表达式的重复字符&lt;/h3&gt;

&lt;table border=&quot;1&quot; style=&quot;width:100%;&quot;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;th width=&quot;20%&quot;&gt;字符&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;{n,m}&lt;/td&gt;&lt;td&gt;匹配前一项至少n次，但是不能超过m次&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;{n,}&lt;/td&gt;&lt;td&gt;匹配前一项n次，或更多次&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;{n}&lt;/td&gt;&lt;td&gt;匹配前一项恰好n次&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;?&lt;/td&gt;&lt;td&gt;匹配前一项0次或1次，也就是说前一项是可选。等价于{0,1}&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;匹配前一项1次或多次，等价于{1,}&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;匹配前一项0次或多次，等价于{0,}&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;




&lt;br&gt;


&lt;h3&gt;正则表达式的选择、分组和引用字符&lt;/h3&gt;

&lt;table border=&quot;1&quot; style=&quot;width:100%;&quot;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;th width=&quot;20%&quot;&gt;字符&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;|&lt;/td&gt;&lt;td&gt;选择。匹配的是该符号左边的子表达式或右边的子表达式&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;(...)&lt;/td&gt;&lt;td&gt;组合。将几个项目组合为一个单元，这个单元可由*、+、?和|等符号使用，而且还可以记住和这个组合匹配的字符以供此后的引用使用&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;(?:...)&lt;/td&gt;&lt;td&gt;只组合。把项目组合到一个单元，但是不记忆与该组匹配的字符&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\n&lt;/td&gt;&lt;td&gt;和第n个分组第一次匹配的字符相匹配。组是括号中的子表达式(可能是嵌套的)。组号是从左到右计数的左括号数，以(?:形式分组的组不编码&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;




&lt;br&gt;


&lt;h3&gt;正则表达式的锚字符&lt;/h3&gt;

&lt;table border=&quot;1&quot; style=&quot;width:100%;&quot;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;th width=&quot;20%&quot;&gt;字符&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;^&lt;/td&gt;&lt;td&gt;匹配字符串的开头，在多行检索中，匹配一行的开头&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;$&lt;/td&gt;&lt;td&gt;匹配字符串的结尾，在多行检索中，匹配一行的结尾&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\b&lt;/td&gt;&lt;td&gt;匹配一个词语的边界。简而言之，就是位于字符\w和\W之间的位置，或位于字符\w和字符串的开头或结尾之间的位置(但注意，[\b]匹配的是退格符)&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;\B&lt;/td&gt;&lt;td&gt;匹配非词语边界的位置&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;(?=p)&lt;/td&gt;&lt;td&gt;正前向声明，要求接下来的字符都与模式p匹配，但是不包括匹配中的那些字符&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;(?!=p)&lt;/td&gt;&lt;td&gt;反前向声明，要求接下来的字符不与模式p匹配&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;




&lt;br&gt;


&lt;h3&gt;正则表达式的标志&lt;/h3&gt;

&lt;table border=&quot;1&quot; style=&quot;width:100%;&quot;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;th width=&quot;20%&quot;&gt;字符&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;i&lt;/td&gt;&lt;td&gt;执行不区分大小写的匹配&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;g&lt;/td&gt;&lt;td&gt;执行一个全局匹配。简而言之，即找到所有匹配，而不是在找到第一个之后就停止&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;m&lt;/td&gt;&lt;td&gt;多行模式，^匹配一行的开头或字符串的开头，$匹配一行的结尾或字符串的结尾&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;



</content>
 </entry>
 
 <entry>
   <title>STL Map/MultiMap 内部结构</title>
   <link href="http://nekle.github.com/2011/07/14/stl-map%3Amultimap.html"/>
   <updated>2011-07-14T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2011/07/14/stl-map:multimap</id>
   <content type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/syntax-js/shBrushCpp.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;2011年7月14日
9:38&lt;/p&gt;

&lt;h3&gt;一、空间结构&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;map和multimap将key-value pair当做元素，进行管理。它们可根据key的排序准则将元素排序。multimap允许元素重复，map不允许。&lt;/p&gt;&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;它们内部都采用rb_tree实现&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8139/8749903444_ca65feb22d.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;二、空间管理&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;参见rb_tree&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;三、map与multimap比较&lt;/h3&gt;

&lt;p&gt;   参见set与multiset比较，不同在于map与multimap如果value_type 不是const的则可修改value值。&lt;/p&gt;

&lt;h3&gt;四、相关型别&lt;/h3&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
public:
 
  // typedefs:
 
  typedef Key key_type;           // 键值型别
  typedef T data_type;            // 资料（真值）型别
  typedef T mapped_type;          // (未被使用)
  typedef pair&lt; const Key, T&gt; value_type;    // 元素型别（键值/真值）
  typedef Compare key_compare;    // 键值比较函式
 
private:
  // 以下定义表述型别（representation type）。以map元素型别（一个pair）
  // 的第一型别，做为RB-tree节点的键值型别。
  typedef rb_tree&lt; key_type, value_type,
                  select1st&lt; value_type&gt;, key_compare, Alloc&gt; rep_type;
  rep_type t;  // 以红黑树（RB-tree）表现 map
public:
  typedef typename rep_type::pointer pointer;
  typedef typename rep_type::const_pointer const_pointer;
  typedef typename rep_type::reference reference;
  typedef typename rep_type::const_reference const_reference;
  typedef typename rep_type::iterator iterator;
  // 注意上一行，为什么不像set一样地将iterator 定义为 RB-tree 的 const_iterator？
  // 按说map 的元素有一定次序安排，不允许使用者在任意处做写入动作，因此
  // 迭代器应该无法执行写入动作才是。
  typedef typename rep_type::const_iterator const_iterator;
  typedef typename rep_type::reverse_iterator reverse_iterator;
  typedef typename rep_type::const_reverse_iterator const_reverse_iterator;
  typedef typename rep_type::size_type size_type;
  typedef typename rep_type::difference_type difference_type;


&lt;/pre&gt;


&lt;p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>STL Set/MultiSet 内部结构</title>
   <link href="http://nekle.github.com/2011/07/13/stl-set%3Amultiset.html"/>
   <updated>2011-07-13T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2011/07/13/stl-set:multiset</id>
   <content type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/syntax-js/shBrushCpp.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;2011年7月13日
21:39&lt;/p&gt;

&lt;h3&gt;一、空间结构&lt;/h3&gt;

&lt;p&gt;set和multiset都是采用rb_tree实现，内部方法都是调用的rb_tree方法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;抽象结构：&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8551/8749903434_c6a8325423.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;二、空间管理&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;参见rb_tree&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;三、set与multiset比较&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;相同点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1、采用rb_tree实现&lt;/li&gt;
&lt;li&gt;2、只允许插入和删除操作，修改是不允许的(iterator为const类型)&lt;/li&gt;
&lt;li&gt;3、提供接口完全相同。&lt;/li&gt;
&lt;li&gt;4、若要修改元素值，必须先删除原来的值插入新值。&lt;/li&gt;
&lt;li&gt;5、元素都是排好序的，所以修改元素值排序会被破坏。&lt;/li&gt;
&lt;li&gt;6、移除等值元素erase(value)，移除所有等于value的元素。(list 用remove(value))&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;不同点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1、set中元素不允许重复，而multiset中元素允许重复。&lt;/li&gt;
&lt;li&gt;2、插入时set采用insert_unique，而multiset采用insert_equal&lt;/li&gt;
&lt;li&gt;3、插入返回值不同，set由于不允许元素重复，所以要么成功要么失败；而multiset则允许元素重复&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;注意：&lt;/em&gt;其中pos_hint只是一个位置提示，它可以提升插入性能，也是为了提供一种统一的接口。&lt;/p&gt;

&lt;h3&gt;四、具体动作对指针影响&lt;/h3&gt;

&lt;p&gt;   参见rb_tree&lt;/p&gt;

&lt;h3&gt;五、相关型别&lt;/h3&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
public:
  // typedefs:
 
  typedef Key key_type;
  typedef Key value_type;
  // 注意，以下 key_compare 和 value_compare 使用相同的比较函式
  typedef Compare key_compare;
  typedef Compare value_compare;
 
private:
  /* 注意，identity 定义于 &lt; stl_function.h&gt;，参见第7章，其定义为：
    template &lt; class T&gt;
    struct identity : public unary_function&lt; T, T&gt; {
      const T&amp; operator()(const T&amp; x) const { return x; }
    };
  */
  // 以下，rb_tree&lt; Key, Value, KeyOfValue, Compare, Alloc&gt;
  typedef rb_tree&lt; key_type, value_type,
                     identity&lt; value_type&gt;, key_compare, Alloc&gt; rep_type;
  rep_type t;  // 采用红黑树（RB-tree）来表现 set
public:
  typedef typename rep_type::const_pointer pointer;
  typedef typename rep_type::const_pointer const_pointer;
  typedef typename rep_type::const_reference reference;
  typedef typename rep_type::const_reference const_reference;
  typedef typename rep_type::const_iterator iterator;
  // 注意上一行，iterator 定义为 RB-tree 的 const_iterator，这表示 set 的
  // 迭代器无法执行写入动作。这是因为 set 的元素有一定次序安排，
  // 不允许使用者在任意处做写入动作。
  typedef typename rep_type::const_iterator const_iterator;
  typedef typename rep_type::const_reverse_iterator reverse_iterator;
  typedef typename rep_type::const_reverse_iterator const_reverse_iterator;
  typedef typename rep_type::size_type size_type;
  typedef typename rep_type::difference_type difference_type;

&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>STL List 内部结构</title>
   <link href="http://nekle.github.com/2011/07/13/stl-list.html"/>
   <updated>2011-07-13T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2011/07/13/stl-list</id>
   <content type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/syntax-js/shBrushCpp.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;2011年7月13日
15:17&lt;/p&gt;

&lt;h3&gt;一、空间结构&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、结点结构&lt;/li&gt;
&lt;/ul&gt;


&lt;pre class=&quot;brush: cpp&quot;&gt;
//串行节点结构。这是一个双向串行
template &lt; class T&gt;
struct __list_node {
  typedef void* void_pointer;
  void_pointer next;  // 型别为 void * 。其实可设为 __list_node&lt; T&gt;*
  void_pointer prev;
  T data;
};
 &lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;2、链表结构&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8117/8749903442_d3d81ccb33.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;二、存储管理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、初始化时，分配空节点node，让其next和prev指针指向自身。&lt;/li&gt;
&lt;li&gt;2、push_back和push_front总是调用的insert插入pos前面。&lt;/li&gt;
&lt;li&gt;3、insert总是创建一个结点连接到pos之前。&lt;/li&gt;
&lt;li&gt;4、erase删除结点后，先释放结点中数据，再释放释放结点。&lt;/li&gt;
&lt;li&gt;5、clear释放所有结点，只保留node结点，list处于初始状态。(只有node结点的双向环)&lt;/li&gt;
&lt;li&gt;6、两list做swap，只交换node指针。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;三、各动作对指针的影响&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、插入和删除动作都不会造成指向其他元素的pointers、references、iterators 失效。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;四、List排序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用归并排序：&lt;/li&gt;
&lt;/ul&gt;


&lt;pre class=&quot;brush: cpp&quot;&gt;      
// list 不能使用STL 算法 sort()，必须使用自己的 sort() member function，
// 因为STL算法sort() 只接受RamdonAccessIterator.

template &lt; class T, class Alloc&gt;
void list&lt; T, Alloc&gt;::sort() {
    // 以下判断，如果是空白串行，或仅有一个元素，就不做任何动作。
    // 使用 size() == 0 || size() == 1 来判断，虽然也可以，但是比较慢。
    if (node-&gt;next == node || link_type(node-&gt;next)-&gt;next == node) return;
 
    // 一些新的 lists，做为中介数据存放区
    list&lt; T, Alloc&gt; carry;
    list&lt; T, Alloc&gt; counter[64];
    int fill = 0;
    while (!empty()) {
        carry.splice(carry.begin(), *this, begin());// 移动一个元素到carry上
        int i = 0;
        while(i &lt; fill &amp;&amp; !counter[i].empty()) {
            counter[i].merge(carry);
            carry.swap(counter[i++]);
        }
        carry.swap(counter[i]);
        if (i == fill) ++fill;
    }
    // 遍历counter将结果最终归并到counter[fill-1]上
    for (int i = 1; i &lt; fill; ++i) counter[i].merge(counter[i-1]);
    swap(counter[fill-1]);
 }
&lt;/pre&gt;


&lt;h3&gt;五、相关型别&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、Iterator相关型别&lt;/li&gt;
&lt;/ul&gt;


&lt;pre class=&quot;brush: cpp&quot;&gt;

// 串行专属迭代器。既然撰写串行迭代器避免不了要曝露串行的实作细节，
// 那么就让串行和串行迭代器一起设计好了。
template&lt; class T, class Ref, class Ptr&gt;
struct __list_iterator { // 未继承 std::iterator
  typedef __list_iterator&lt; T, T&amp;, T*&gt;             iterator;
  typedef __list_iterator&lt; T, const T&amp;, const T*&gt; const_iterator;
  typedef __list_iterator&lt; T, Ref, Ptr&gt;           self;
 
  // 未继承std::iterator，所以必须自行撰写五个必要的迭代器相应型别
  typedef bidirectional_iterator_tag iterator_category;     // (1)
  typedef T value_type;              // (2)
  typedef Ptr pointer;               // (3)
  typedef Ref reference;             // (4)
  typedef __list_node&lt; T&gt;* link_type;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type; // (5)
 
  link_type node;  // 保持与容器的联结
 &lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;2、List相关型别&lt;/li&gt;
&lt;/ul&gt;


&lt;pre class=&quot;brush: cpp&quot;&gt;
public:     
  typedef T value_type;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef value_type&amp; reference;
  typedef const value_type&amp; const_reference;
  typedef list_node* link_type;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
 
public:
  // 当客端定义一个list&lt; T&gt;::iterator 对象，例如 list&lt; T&gt;::iterator，
  // 便唤起__list_iterator&lt; T, T&amp;, T*&gt; 的 ctor。
  // 如果有初值，便会因此设定一个迭代器对容器的联结关系。
  typedef __list_iterator&lt; T, T&amp;, T*&gt;             iterator;
  typedef __list_iterator&lt; T, const T&amp;, const T*&gt; const_iterator;
protected:
  // 从实作细节看来，本 list 只维护一个节点指标，指向最后（尾）节点的下一位置。
  // 由于这是一个环状双向串行，因此，欲对外供应头节点或尾节点，都十分容易，
  // 见 front(), back()。
  link_type node; // 永远指向最后节点的下一节点。该节点无元素值，代表空节点。
  // 其 next 节点永远是头节点。

&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>STL-Vector 内部结构</title>
   <link href="http://nekle.github.com/2011/07/11/stl-vector.html"/>
   <updated>2011-07-11T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2011/07/11/stl-vector</id>
   <content type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/syntax-js/shBrushCpp.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;2011年7月11日
16:00&lt;/p&gt;

&lt;h3&gt;一、vector结构&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;vector是一个顺序存储容器，内部使用动态数组实现。支持元素的随机访问，所以只要知道位置，就可以在常数时间内存取该元素。在末尾插入和删除元素时，vector的性能很好，可以在常数时间内完成。如果实在前段或中部插入或删除元素，性能很差，需在线性时间内完成，因为动作点之后的每一个元素都必须移动，每一次都必须调用赋值运算。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8130/8748723621_8399faf990.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;二、空间管理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、 初始换空间分配

&lt;ul&gt;
&lt;li&gt;a、默认请况下，空间分配为0.（第一次插入空间变为 1 ）&lt;/li&gt;
&lt;li&gt;b、可设定空间大下和初始化值。&lt;code&gt;Vector(10, &quot;a&quot;)&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2、空间不足

&lt;ul&gt;
&lt;li&gt;a、当空间不足时，重新申请一个原来2倍的空间，拷贝原来的值，然后析构原来的空间(若空间分配失败，则析构已分配的空间，rollback)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3、若想减少空间，可利用swap函数，但效率低下。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;三、具体动作空间管理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、重分配空间大小&lt;code&gt;reserve(size_type n)&lt;/code&gt;，若n大于现在空间则重新申请空间，将数据拷贝到新空间，并设置iterator信息，否则不做处理。&lt;/li&gt;
&lt;li&gt;2、管理数据数量&lt;code&gt;resize(size_type new_size, const T&amp;amp; x)&lt;/code&gt;，若new_size小于现在数据size则析构多余数据，否则用x补够数据。&lt;/li&gt;
&lt;li&gt;3、&lt;code&gt;clear&lt;/code&gt;析构所有数据空间&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;四、动作与相关型别失效&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、插入和删除元素，都会使动作点之后的元素的references、pointers、iterators失效，如果插入动作会引起空间大小重新分配，那么该容器上的所有references、pointers、iterators都会失效。&lt;/li&gt;
&lt;li&gt;2、&lt;code&gt;swap&lt;/code&gt;则所有references、pointers、iterators都会失效。&lt;/li&gt;
&lt;li&gt;3、&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;二、相关型别&lt;/h3&gt;

&lt;p&gt; &lt;pre class=&quot;brush: cpp&quot;&gt;
// 以下标示(1),(2),(3),(4),(5)，代表 iterator_traits&amp;lt; I&gt; 所服务的5个型别。
  typedef T value_type;                     //  (1)
  typedef value_type&lt;em&gt; pointer;          //  (2)
  typedef const value_type&lt;/em&gt; const_pointer;
  typedef const value_type&lt;em&gt; const_iterator;
  typedef value_type&amp;amp; reference;            // (3)
  typedef const value_type&amp;amp; const_reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;        // (4)
  // 以下，由于vector 所维护的是一个连续线性空间，所以不论其元素型别为何，
  // 原生指标都可以做为其迭代器而满足所有需求。
  typedef value_type&lt;/em&gt; iterator;
  // 根据上述写法，如果客端写出这样的码：
  // vector&amp;lt; Shape&gt;::iterator is;
  // is 的型别其实就是Shape*
  // 而STL 内部运用 iterator_traits&amp;lt; is&gt;::reference 时，获得Shape&amp;amp;
  // 运用iterator_traits&amp;lt; is&gt;::iterator_category 时，获得
  // random_access_iterator_tag        (5)
  // (此乃iterator_traits 针对原生指标的特化结果)
 &lt;/pre&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>STL Deque 内部结构</title>
   <link href="http://nekle.github.com/2011/07/11/stl-deque.html"/>
   <updated>2011-07-11T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2011/07/11/stl-deque</id>
   <content type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/syntax-js/shBrushCpp.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;2011年7月11日
19:51&lt;/p&gt;

&lt;h3&gt;一、Deque结构&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8113/8749903448_4768e8a6cf.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;二、空间管理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、初始空间分配
    初始分配map空间为所需max(8, need_node+2)，start和finish都从中间向两边扩展。先分配map，然后分配各个node的缓冲区。若分配失败，则全部析构。&lt;/li&gt;
&lt;li&gt;2、空间不足
    重新分配map大小，start和finish同样从中间向两边扩展，将原来map数据拷贝到新map中，释放原来map空间。设置start和finish迭代器信息。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;三、具体动作空间管理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、在开始或末尾位置push，空间不足。使用map扩展，并在开始或末尾创建新缓冲区。&lt;/li&gt;
&lt;li&gt;2、在中间insert，比较pos前后移动元素开销，移动元素后插入待插元素。&lt;/li&gt;
&lt;li&gt;3、在开始或末尾位置pop，若一个缓冲区已经没有元素则将该缓冲区释放。&lt;/li&gt;
&lt;li&gt;4、erase某位置元素，比较前后元素移动开销，直接移动，并释放端点元素。&lt;/li&gt;
&lt;li&gt;5、erase某个区间，同上。&lt;/li&gt;
&lt;li&gt;6、clear空间，先释放缓冲区元素，在释放缓冲区，最后保留一个缓冲区。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;四、具体动作产生的指针影响&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、除了在头尾两端，插入或删除元素不会引起指向其他元素的pointers、 references、 iterators失效外。在任何其他地方插入和删除元素都有可能引起指向其他元素的pointers、 references、iterators失效&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;五、相关型别&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、自定义Iterator&lt;/li&gt;
&lt;/ul&gt;


&lt;pre class=&quot;brush: cpp&quot;&gt;
 // 未继承std::iterator，所以必须自行撰写五个必要的迭代器相应型别
  typedef random_access_iterator_tag iterator_category; // (1)
  typedef T value_type;                 // (2)
  typedef Ptr pointer;                 // (3)
  typedef Ref reference;                 // (4)
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;     // (5)
  typedef T ** map_pointer;
  typedef __deque_iterator self;
  // 保持与容器的联结
  T* cur;    // 此迭代器所指之缓冲区中的现行（current）元素
  T* first;    // 此迭代器所指之缓冲区的头
  T* last;    // 此迭代器所指之缓冲区的尾（含备用空间）
     map_pointer node; // 当前缓冲器
&lt;/pre&gt;


&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2、Deque相关型别&lt;/li&gt;
&lt;/ul&gt;


&lt;pre class=&quot;brush: cpp&quot;&gt;          
public:                        // Basic types
  typedef T value_type;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef value_type&amp; reference;
  typedef const value_type&amp; const_reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
 
public:                         // Iterators
 #ifndef __STL_NON_TYPE_TMPL_PARAM_BUG
  typedef __deque_iterator&lt; T, T&amp;, T*, BufSiz&gt; iterator;
  typedef __deque_iterator&lt; T, const T&amp;, const T&amp;, BufSiz&gt;  const_iterator;
 #else / * __STL_NON_TYPE_TMPL_PARAM_BUG * /
typedef __deque_iterator&lt; T, T&amp;, T*&gt; iterator;
  typedef __deque_iterator&lt; T, const T&amp;, const T*&gt; const_iterator;
 #endif /* __STL_NON_TYPE_TMPL_PARAM_BUG */
&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Output Iterator</title>
   <link href="http://nekle.github.com/2011/03/28/%28STL%29Output-Iterator.html"/>
   <updated>2011-03-28T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2011/03/28/(STL)Output-Iterator</id>
   <content type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/syntax-js/shBrushCpp.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;2011年3月28日
15:22&lt;/p&gt;

&lt;h2&gt;应用：copy&lt;/h2&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
template &lt; class InputIterator, class OutputIterator&gt;
OutputIterator copy(InputIerator first, InputIerator last, OutputIterator result)
{
    for (; first != last; ++result, ++first)
        *result = *first;
    return result;
}
&lt;/pre&gt;


&lt;h2&gt;Concept：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;①复制（参数传入）和赋值（&lt;code&gt;*result=*first&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;②可累加（&lt;code&gt;++result&lt;/code&gt;），表达式&lt;code&gt;++p&lt;/code&gt;与&lt;code&gt;p++&lt;/code&gt;有意义；&lt;/li&gt;
&lt;li&gt;③single-pass（单回），只写性（可以&lt;code&gt;*p=x&lt;/code&gt;，但不能&lt;code&gt;x=*p&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;④不提供比较（!=、==、&amp;lt;、&gt;）&lt;/li&gt;
&lt;li&gt;⑤&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;例：ostream_itertor&lt;/h2&gt;

&lt;pre class=&quot;brush:cpp&quot;&gt;
// 这是一个output iterator，能够将对象格式化输出到某个 basic_ostream 上。
// 注意，此版本为旧有之 HP 规格，未符合标准接口：
// ostream_iterator&lt; T, char T, traits&gt;
// 然而一般使用output iterators 时都只使用第一个template 参数，此时以下仍适用。
// 注：SGI STL 3.3已实作出符合标准接口的 ostream_iterator。作法与本版大同小异。
// 本版可读性较高。
template &lt; class T&gt;
class ostream_iterator {
protected:
  ostream* stream;
  const char* string;        // 每次输出后的间隔符号。
public:
  typedef output_iterator_tag     iterator_category;
  typedef void                    value_type;
  typedef void                    difference_type;
  typedef void                    pointer;
  typedef void                    reference;
 
  // 下面这些ctors 使 istream_iterator 和某个 istream object 系结起来。
  ostream_iterator(ostream&amp; s) : stream(&amp;s), string(0) {}
  ostream_iterator(ostream&amp; s, const char* c) : stream(&amp;s), string(c)  {}
  // 以上 ctors 的用法：
  //  ostream_iterator&lt; int&gt; outiter(cout, ' ');  输出至 cout，每次间隔一个空格
 
  // 对迭代器做赋值（assign）动作，就代表要输出一笔数据
  ostream_iterator&lt; T&gt;&amp; operator=(const T&amp; value) {
    *stream &lt;&lt; value;                // 先输出数值
    if (string) *stream &lt;&lt; string;    // 如果状态无误，再输出间隔符号
    return *this;
  }
  ostream_iterator&lt; T&gt;&amp; operator*() { return *this; }
  ostream_iterator&lt; T&gt;&amp; operator++() { return *this; }
  ostream_iterator&lt; T&gt;&amp; operator++(int) { return *this; }
};
 
 &lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Input Iterator</title>
   <link href="http://nekle.github.com/2011/03/27/%28STL%29Input-Iterator.html"/>
   <updated>2011-03-27T00:00:00+08:00</updated>
   <id>http://nekle.github.com/2011/03/27/(STL)Input-Iterator</id>
   <content type="html">&lt;p&gt;2011年3月27日
19:48&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/syntax-js/shBrushCpp.js&quot;&gt;&lt;/script&gt;


&lt;h2&gt;应用：find&lt;/h2&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
template &lt; class InputIterator, class T&gt;
InputIterator find(InputIterator first, InputIterator last, const T&amp; value) {
  while (first != last &amp;&amp; *first != value) ++first;
  return first;
}
&lt;/pre&gt;


&lt;h3&gt;Concept:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;①是可取值的通过&lt;code&gt;*&lt;/code&gt;操作，即&lt;code&gt;*p&lt;/code&gt;有充分意义。&lt;/li&gt;
&lt;li&gt;②可比较两个input iterator对象的相等性，如first != last。可以判断是否到达range尾端。&lt;/li&gt;
&lt;li&gt;③可以被复制，如first、last值的传入调用的copy constructor。&lt;/li&gt;
&lt;li&gt;④每个iterator都有一个value type，即iterator所指对象的类型。&lt;/li&gt;
&lt;li&gt;⑤可对一个input iterator进行累加操作，即&lt;code&gt;++p&lt;/code&gt;和&lt;code&gt;p++&lt;/code&gt;有意义。&lt;/li&gt;
&lt;li&gt;⑥我们可以通过&lt;code&gt;*iterator&lt;/code&gt;获得iterator所指的值，但不一定能通过&lt;code&gt;*it = x&lt;/code&gt;修改其值。&lt;/li&gt;
&lt;li&gt;⑦input iterator仅支持指针运算中的一小部分，如input iterator可以累加，但不一定提供递减和算术运算。&lt;/li&gt;
&lt;li&gt;⑧input  iterator也只支持测试两个input  iterator是否相等，不能比较先后顺序。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;
这些Concept限制是运用input iterator的算法所受到的限制，而不是构造input iterator所受到的限制，任何运用input iterator的算法都不能超出input iterator的限制。&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
// 这是一个input iterator，能够为「来自某一 basic_istream」的对象执行
// 格式化输入动作。注意，此版本为旧有之 HP 规格，未符合标准接口：
// istream_iterator&lt; T, char T, traits, Distance&gt;
// 然而一般使用input iterators 时都只使用第一个template 参数，此时以下仍适用。
// 注：SGI STL 3.3已实作出符合标准接口的 istream_iterator。作法与本版大同小异。
// 本版可读性较高。
template &lt; class T, class Distance = ptrdiff_t&gt;
class istream_iterator {
  friend bool
  operator== __STL_NULL_TMPL_ARGS (const istream_iterator&lt; T, Distance&gt;&amp; x,
                                          const istream_iterator&lt; T, Distance&gt;&amp; y);
  // 以上语法很奇特，请参考C++ Primer p834: bound friend function template
  // 在 &lt; stl_config.h&gt; 中，__STL_NULL_TMPL_ARGS 被定义为 &lt; &gt;
protected:
  istream* stream;
  T value;
  bool end_marker;
  void read() {
    end_marker = (* stream) ? true : false;
    if (end_marker) * stream &gt;&gt; value;
    // 以上，输入之后，stream 的状态可能改变，所以下面再判断一次以决定 end_marker
    // 当读到 eof 或读到型别不符的数据，stream 即处于 false 状态。
    end_marker = (* stream) ? true : false;
  }
public:
  typedef input_iterator_tag     iterator_category;
  typedef T                          value_type;
  typedef Distance               difference_type;
  typedef const T*               pointer;
  typedef const T&amp;               reference;
  // 以上，因身为input iterator，所以采用 const 比较保险
 
  // 下面这些ctors 使 istream_iterator 和某个istream object 系结起来。
  istream_iterator() : stream(&amp;cin), end_marker(false) {}
  istream_iterator(istream&amp; s) : stream(&amp;s) { read(); }
  // 以上两行的用法：
  //  istream_iterator&lt; int&gt; eos;            造成 end_marker 为 false。
  //  istream_iterator&lt; int&gt; initer(cin);   引发 read()。程序至此会等待输入。
  // 因此，下面这两行客端程序：
  //  istream_iterator&lt; int&gt; initer(cin);       (A)
  //  cout &lt;&lt; &quot;please input...&quot; &lt;&lt; endl;           (B)
  // 会停留在 (A) 等待一个输入，然后才执行 (B) 出现提示讯息。这是不合理的现象。
  // 规避之道：永远在最必要的时候，才定义一个 istream_iterator。
 
  reference operator* () const { return value; }
 #ifndef __SGI_STL_NO_ARROW_OPERATOR
  pointer operator-&gt;() const { return &amp;(operator* ()); }
 #endif /* __SGI_STL_NO_ARROW_OPERATOR */
 
  // 迭代器前进一个位置，就代表要读取一笔数据
  istream_iterator&lt; T, Distance&gt;&amp; operator++() {
    read();
    return *this;
  }
  istream_iterator&lt; T, Distance&gt; operator++(int)  {
    istream_iterator&lt; T, Distance&gt; tmp = *this;
    read();
    return tmp;
  }
};
 
 #ifndef __STL_CLASS_PARTIAL_SPECIALIZATION
 
template &lt; class T, class Distance&gt;
inline input_iterator_tag
iterator_category(const istream_iterator&lt; T, Distance&gt;&amp;) {
  return input_iterator_tag();
}
 
template &lt; class T, class Distance&gt;
inline T* value_type(const istream_iterator&lt; T, Distance&gt;&amp;) { return (T*) 0; }
 
template &lt; class T, class Distance&gt;
inline Distance* distance_type(const istream_iterator&lt; T, Distance&gt;&amp;) {
  return (Distance*) 0;
}
 
 #endif /* __STL_CLASS_PARTIAL_SPECIALIZATION */
 
template &lt; class T, class Distance&gt;
inline bool operator==(const istream_iterator&lt; T, Distance&gt;&amp; x,
                       const istream_iterator&lt; T, Distance&gt;&amp; y) {
  return x.stream == y.stream &amp;&amp; x.end_marker == y.end_marker ||
         x.end_marker == false &amp;&amp; y.end_marker == false;
}
&lt;/pre&gt;

</content>
 </entry>
 
 
</feed>
